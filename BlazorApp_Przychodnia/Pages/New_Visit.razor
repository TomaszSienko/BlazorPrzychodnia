@page "/newvisit"
@using BlazorApp_Przychodnia.Models
@using Microsoft.EntityFrameworkCore;
@using System.Threading;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components
<div class="container" style="background-color:darkslateblue; color:@warning_color;width:@width; height:@height ">
<h2>@warning</h2>

</div>


<div class="container" >
		<div class="slide"></div>
		<h1 style="margin-top: 2%; font-size:x-large;">Nowa Wizyta</h1>
		<div class="container" style="width:100%; border: 5px solid rgb(233, 227, 227); border-radius:10%;background-color: rgba(255, 255, 255, 0.636); height:600px; margin-top:2%; display:flex">
        <div style="margin:3%; border: 4px solid; border-color:rgba(133, 96, 224, 0.636)">
            <div style="height:300px;" class="container">
                <table class="table">
                    <thead>
                        <tr>
                            <th style="background-color: darkslateblue;">Pacjent</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in _colorspatient)
                        {
                            <tr>
                                <td @onclick="() => Patient_Select(item.patient)" style="background-color:@item.color">@item.patient</td>
                            </tr>
                        }
                    </tbody>
                </table>
            
            </div>
        <input type="text" name="login" placeholder="Wyszukaj" style="margin-left:2%"/>
        <button class="button">Szukaj   </button>
        </div>
        <div style="margin:3%; border: 4px solid; border-color:rgba(133, 96, 224, 0.636)">
            <div style="height:300px;" class="container">
                <table class="table">
                    <thead>
                        <tr>
                            <th style="background-color: darkslateblue;">Lekarz</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in _colorsdoctor)
                        {
                            <tr>
                                <td @onclick="() => Doctor_Select(item.patient)" style="background-color:@item.color">@item.patient</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
            <input type="text" name="login" placeholder="Wyszukaj" style="margin-left:2%" />
            <button class="button">Szukaj   </button>
        </div>
        <div style="margin:3%; border: 4px solid; border-color:rgba(133, 96, 224, 0.636);">
            <div style="height:300px; width:400px; background-color:darkslateblue; overflow:clip; align-items:center; align-content:center;" class="container">
                   
                <h5 style="padding-top:5%">Wybierz Date:</h5>
                <input type="date" @bind-value="@date" />
               
                <h5 style="margin-top:15%">Wybierz Godzine i Minute:</h5>
                <div style="display:flex margin-top:20%;">
                    <input type="text" style="width:20%" @bind-value="@hour" />
                    :
                    <input type="text" style="width:20%" @bind-value="@minute" />


                </div>
               


            </div>
            <button class="button" style="margin-top:20%" @onclick="Make_a_Visit">Zatwierdź</button>
        </div>


    </div>
		
</div>
@code {
    private string warning = " Nie wybrano poprawnych danych !";
    private string warning_color = "red";
    private string width="0px";
    private string height = "0px";
    private DateTime date;
    private int hour=0;
    private int minute=0;
    private string selected_patient=null;
    private string selected_doctor=null;
    public int id_patient;
    public int id_doctor;

    PrzychodniaContext dbp = new PrzychodniaContext();
    public class colors
    {
        public string patient;
        public string color;
    }
    public List<colors> _colorspatient = new List<colors>();
    public List<colors> _colorsdoctor = new List<colors>();
    List<string> namemarge_pacjenci = new List<string>();
    List<string> namemarge_doctors = new List<string>();
    protected override void OnInitialized()
    {
        Patient_List_Generate();
        Doctor_List_Generate();
    }

    private void Patient_List_Generate()
    {
        foreach (var item in dbp.Pacjents)
        {
            string patient = item.Imie + " " + item.Nazwisko;
            namemarge_pacjenci.Add(patient);

            _colorspatient.Add(new colors()
                {
                    color = "CornflowerBlue",
                    patient = item.Imie + " " + item.Nazwisko

                });

        }




    }
    private void Doctor_List_Generate()
    {

        foreach (var item in dbp.Lekarzs)
        {
            string doctor = item.Imie + " " + item.Nazwisko;
            namemarge_doctors.Add(doctor);
            _colorsdoctor.Add(new colors()
                {
                    color = "CornflowerBlue",
                    patient = item.Imie + " " + item.Nazwisko

                });


        }
    }
    public void Patient_Select(string patient)
    {
        selected_patient = patient;
        try
        {
            _colorspatient.Find(c => c.color == "DarkSlateBlue").color = "CornflowerBlue";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            _colorspatient.Find(n => n.patient == patient).color = "DarkSlateBlue";
        }

    }
    public void Doctor_Select(string patient)
    {
        selected_doctor = patient;
        try
        {
            _colorsdoctor.Find(c => c.color == "DarkSlateBlue").color = "CornflowerBlue";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            _colorsdoctor.Find(n => n.patient == patient).color = "DarkSlateBlue";
        }

    }
    public async Task Make_a_Visit()
    {
        if (selected_doctor != null && selected_patient != null && hour != 0)
        {
            string[] nameParts = selected_patient.Split(' ');
            string[] doctorParts = selected_doctor.Split(' ');

            TimeSpan time = new TimeSpan(hour, minute, 0);

            foreach (var patient in dbp.Pacjents)
            {
                if (patient.Imie == nameParts[0] && patient.Nazwisko == nameParts[1])
                {
                    id_patient = patient.IdPacjenta; break;
                }
            }
            foreach (var doctor in dbp.Lekarzs)
            {
                if (doctor.Imie == doctorParts[0] && doctor.Nazwisko == doctorParts[1])
                {
                    id_doctor = doctor.IdLekarza; break;
                }
            }
            Wizyty wizyta = new Wizyty();

            wizyta.IdLekarza = id_doctor;
            wizyta.IdPacjenta = id_patient;
            wizyta.Data = date;
            wizyta.Godzina = time;

            dbp.Wizyties.Add(wizyta);
            dbp.SaveChanges();
            warning = "Pomyślnie Dodano Wizyte !";
            warning_color = "springgreen";
            width = "1320px";
            height = "46px";
            await Task.Delay(3000);
            width = "0px";
            height = "0px";

        }
        else
        {

            warning_color = "red";
            warning = "Nie wybrano poprawnych danych !";
            width =  "1320px";
            height = "46px";
            await Task.Delay(3000);
            width = "0px";
            height = "0px";
        }
        
       
  }

}
